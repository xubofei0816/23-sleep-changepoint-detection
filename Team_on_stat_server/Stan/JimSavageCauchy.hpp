// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace JimSavageCauchy_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 42> locations_array__ =
  {" (found before start of program)",
  " (in 'JimSavageCauchy.stan', line 6, column 2 to column 36)",
  " (in 'JimSavageCauchy.stan', line 7, column 2 to column 22)",
  " (in 'JimSavageCauchy.stan', line 8, column 2 to column 18)",
  " (in 'JimSavageCauchy.stan', line 9, column 2 to column 29)",
  " (in 'JimSavageCauchy.stan', line 10, column 2 to column 38)",
  " (in 'JimSavageCauchy.stan', line 11, column 2 to column 18)",
  " (in 'JimSavageCauchy.stan', line 14, column 2 to column 19)",
  " (in 'JimSavageCauchy.stan', line 15, column 2 to column 18)",
  " (in 'JimSavageCauchy.stan', line 16, column 2 to column 14)",
  " (in 'JimSavageCauchy.stan', line 20, column 4 to column 58)",
  " (in 'JimSavageCauchy.stan', line 24, column 6 to column 75)",
  " (in 'JimSavageCauchy.stan', line 23, column 11 to line 25, column 5)",
  " (in 'JimSavageCauchy.stan', line 22, column 6 to column 79)",
  " (in 'JimSavageCauchy.stan', line 21, column 13 to line 23, column 5)",
  " (in 'JimSavageCauchy.stan', line 21, column 4 to line 25, column 5)",
  " (in 'JimSavageCauchy.stan', line 19, column 16 to line 26, column 3)",
  " (in 'JimSavageCauchy.stan', line 19, column 2 to line 26, column 3)",
  " (in 'JimSavageCauchy.stan', line 44, column 6 to line 47, column 43)",
  " (in 'JimSavageCauchy.stan', line 51, column 6 to column 78)",
  " (in 'JimSavageCauchy.stan', line 54, column 6 to column 30)",
  " (in 'JimSavageCauchy.stan', line 41, column 11 to line 55, column 5)",
  " (in 'JimSavageCauchy.stan', line 33, column 6 to line 36, column 48)",
  " (in 'JimSavageCauchy.stan', line 38, column 6 to column 82)",
  " (in 'JimSavageCauchy.stan', line 39, column 6 to column 30)",
  " (in 'JimSavageCauchy.stan', line 32, column 13 to line 41, column 5)",
  " (in 'JimSavageCauchy.stan', line 32, column 4 to line 55, column 5)",
  " (in 'JimSavageCauchy.stan', line 30, column 16 to line 56, column 3)",
  " (in 'JimSavageCauchy.stan', line 30, column 2 to line 56, column 3)",
  " (in 'JimSavageCauchy.stan', line 61, column 2 to column 18)",
  " (in 'JimSavageCauchy.stan', line 62, column 2 to column 22)",
  " (in 'JimSavageCauchy.stan', line 63, column 2 to column 24)",
  " (in 'JimSavageCauchy.stan', line 64, column 2 to column 23)",
  " (in 'JimSavageCauchy.stan', line 65, column 2 to column 24)",
  " (in 'JimSavageCauchy.stan', line 66, column 2 to column 29)",
  " (in 'JimSavageCauchy.stan', line 70, column 2 to column 24)",
  " (in 'JimSavageCauchy.stan', line 2, column 2 to column 8)",
  " (in 'JimSavageCauchy.stan', line 3, column 9 to column 10)",
  " (in 'JimSavageCauchy.stan', line 3, column 2 to column 14)",
  " (in 'JimSavageCauchy.stan', line 14, column 9 to column 10)",
  " (in 'JimSavageCauchy.stan', line 15, column 9 to column 10)",
  " (in 'JimSavageCauchy.stan', line 16, column 9 to column 10)"};
class JimSavageCauchy_model final : public model_base_crtp<JimSavageCauchy_model> {
 private:
  int T;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
 public:
  ~JimSavageCauchy_model() {}
  JimSavageCauchy_model(stan::io::var_context& context__, unsigned int
                        random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "JimSavageCauchy_model_namespace::JimSavageCauchy_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 36;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 36;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 37;
      stan::math::validate_non_negative_index("y", "T", T);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(T)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(T,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), T);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 38;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("eta", "T", T);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("xi", "T", T);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("f", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 2 + 1 + 2 + 2 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "JimSavageCauchy_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=JimSavageCauchy.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "JimSavageCauchy_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 1;
      p = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, 2);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 3;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, 2);
      local_scalar_t__ xi1_init = DUMMY_VAR__;
      current_statement__ = 5;
      xi1_init = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      local_scalar_t__ y_tm1_init = DUMMY_VAR__;
      current_statement__ = 6;
      y_tm1_init = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,-1> eta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, 2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, 2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 17;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 10;
        stan::model::assign(eta,
          stan::math::exp(
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(t)),
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(1)))),
          "assigning variable eta", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 15;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 13;
          stan::model::assign(eta,
            stan::math::exp(
              stan::math::cauchy_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(t)),
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(2)) + (rho * y_tm1_init)),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2)))),
            "assigning variable eta", stan::model::index_uni(t),
            stan::model::index_uni(2));
        } else {
          current_statement__ = 11;
          stan::model::assign(eta,
            stan::math::exp(
              stan::math::cauchy_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(t)),
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(2)) + (rho *
                stan::model::rvalue(y, "y", stan::model::index_uni((t - 1))))),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2)))),
            "assigning variable eta", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 28;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 26;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 22;
          stan::model::assign(f,
            (((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) +
            ((stan::model::rvalue(p, "p", stan::model::index_uni(2)) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))), "assigning variable f",
            stan::model::index_uni(t));
          current_statement__ = 23;
          stan::model::assign(xi,
            ((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))) /
            stan::model::rvalue(f, "f", stan::model::index_uni(t))),
            "assigning variable xi", stan::model::index_uni(t),
            stan::model::index_uni(1));
          current_statement__ = 24;
          stan::model::assign(xi, (1.0 -
            stan::model::rvalue(xi, "xi", stan::model::index_uni(t),
              stan::model::index_uni(1))), "assigning variable xi",
            stan::model::index_uni(t), stan::model::index_uni(2));
        } else {
          current_statement__ = 18;
          stan::model::assign(f,
            (((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) +
            ((stan::model::rvalue(p, "p", stan::model::index_uni(2)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))), "assigning variable f",
            stan::model::index_uni(t));
          current_statement__ = 19;
          stan::model::assign(xi,
            ((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))) /
            stan::model::rvalue(f, "f", stan::model::index_uni(t))),
            "assigning variable xi", stan::model::index_uni(t),
            stan::model::index_uni(1));
          current_statement__ = 20;
          stan::model::assign(xi, (1.0 -
            stan::model::rvalue(xi, "xi", stan::model::index_uni(t),
              stan::model::index_uni(1))), "assigning variable xi",
            stan::model::index_uni(t), stan::model::index_uni(2));
        }
      }
      {
        current_statement__ = 29;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p, 10, 2));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(rho, 1, .1));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, .1));
        current_statement__ = 32;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 33;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(xi1_init, 2, 2));
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_tm1_init, 0, .1));
        current_statement__ = 35;
        lp_accum__.add(stan::math::sum(stan::math::log(f)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "JimSavageCauchy_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 1;
      p = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, 2);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 3;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, 2);
      local_scalar_t__ xi1_init = DUMMY_VAR__;
      current_statement__ = 5;
      xi1_init = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      local_scalar_t__ y_tm1_init = DUMMY_VAR__;
      current_statement__ = 6;
      y_tm1_init = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,-1> eta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, 2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, 2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> f =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 17;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 10;
        stan::model::assign(eta,
          stan::math::exp(
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(t)),
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(1)))),
          "assigning variable eta", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 15;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 13;
          stan::model::assign(eta,
            stan::math::exp(
              stan::math::cauchy_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(t)),
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(2)) + (rho * y_tm1_init)),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2)))),
            "assigning variable eta", stan::model::index_uni(t),
            stan::model::index_uni(2));
        } else {
          current_statement__ = 11;
          stan::model::assign(eta,
            stan::math::exp(
              stan::math::cauchy_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(t)),
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(2)) + (rho *
                stan::model::rvalue(y, "y", stan::model::index_uni((t - 1))))),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2)))),
            "assigning variable eta", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 28;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 26;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 22;
          stan::model::assign(f,
            (((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) +
            ((stan::model::rvalue(p, "p", stan::model::index_uni(2)) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))), "assigning variable f",
            stan::model::index_uni(t));
          current_statement__ = 23;
          stan::model::assign(xi,
            ((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))) /
            stan::model::rvalue(f, "f", stan::model::index_uni(t))),
            "assigning variable xi", stan::model::index_uni(t),
            stan::model::index_uni(1));
          current_statement__ = 24;
          stan::model::assign(xi, (1.0 -
            stan::model::rvalue(xi, "xi", stan::model::index_uni(t),
              stan::model::index_uni(1))), "assigning variable xi",
            stan::model::index_uni(t), stan::model::index_uni(2));
        } else {
          current_statement__ = 18;
          stan::model::assign(f,
            (((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) +
            ((stan::model::rvalue(p, "p", stan::model::index_uni(2)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))), "assigning variable f",
            stan::model::index_uni(t));
          current_statement__ = 19;
          stan::model::assign(xi,
            ((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))) /
            stan::model::rvalue(f, "f", stan::model::index_uni(t))),
            "assigning variable xi", stan::model::index_uni(t),
            stan::model::index_uni(1));
          current_statement__ = 20;
          stan::model::assign(xi, (1.0 -
            stan::model::rvalue(xi, "xi", stan::model::index_uni(t),
              stan::model::index_uni(1))), "assigning variable xi",
            stan::model::index_uni(t), stan::model::index_uni(2));
        }
      }
      {
        current_statement__ = 29;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(p, 10, 2));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(rho, 1, .1));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, .1));
        current_statement__ = 32;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 33;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(xi1_init, 2, 2));
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_tm1_init, 0, .1));
        current_statement__ = 35;
        lp_accum__.add(stan::math::sum(stan::math::log(f)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "JimSavageCauchy_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> p =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      p = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, 2);
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, 2);
      double xi1_init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      xi1_init = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, 1, lp__);
      double y_tm1_init = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      y_tm1_init = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,-1> eta =
        Eigen::Matrix<double,-1,-1>::Constant(T, 2,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> xi =
        Eigen::Matrix<double,-1,-1>::Constant(T, 2,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> f =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(p);
      out__.write(rho);
      out__.write(alpha);
      out__.write(sigma);
      out__.write(xi1_init);
      out__.write(y_tm1_init);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 17;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 10;
        stan::model::assign(eta,
          stan::math::exp(
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(t)),
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(1)))),
          "assigning variable eta", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 15;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 13;
          stan::model::assign(eta,
            stan::math::exp(
              stan::math::cauchy_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(t)),
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(2)) + (rho * y_tm1_init)),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2)))),
            "assigning variable eta", stan::model::index_uni(t),
            stan::model::index_uni(2));
        } else {
          current_statement__ = 11;
          stan::model::assign(eta,
            stan::math::exp(
              stan::math::cauchy_lpdf<false>(
                stan::model::rvalue(y, "y", stan::model::index_uni(t)),
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(2)) + (rho *
                stan::model::rvalue(y, "y", stan::model::index_uni((t - 1))))),
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(2)))),
            "assigning variable eta", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 28;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 26;
        if (stan::math::logical_eq(t, 1)) {
          current_statement__ = 22;
          stan::model::assign(f,
            (((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) +
            ((stan::model::rvalue(p, "p", stan::model::index_uni(2)) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))), "assigning variable f",
            stan::model::index_uni(t));
          current_statement__ = 23;
          stan::model::assign(xi,
            ((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            xi1_init) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) * (1 -
            xi1_init)) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))) /
            stan::model::rvalue(f, "f", stan::model::index_uni(t))),
            "assigning variable xi", stan::model::index_uni(t),
            stan::model::index_uni(1));
          current_statement__ = 24;
          stan::model::assign(xi, (1.0 -
            stan::model::rvalue(xi, "xi", stan::model::index_uni(t),
              stan::model::index_uni(1))), "assigning variable xi",
            stan::model::index_uni(t), stan::model::index_uni(2));
        } else {
          current_statement__ = 18;
          stan::model::assign(f,
            (((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) +
            ((stan::model::rvalue(p, "p", stan::model::index_uni(2)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(2)))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))), "assigning variable f",
            stan::model::index_uni(t));
          current_statement__ = 19;
          stan::model::assign(xi,
            ((((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(1))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1))) + (((1 -
            stan::model::rvalue(p, "p", stan::model::index_uni(2))) *
            stan::model::rvalue(xi, "xi", stan::model::index_uni((t - 1)),
              stan::model::index_uni(2))) *
            stan::model::rvalue(eta, "eta", stan::model::index_uni(t),
              stan::model::index_uni(1)))) /
            stan::model::rvalue(f, "f", stan::model::index_uni(t))),
            "assigning variable xi", stan::model::index_uni(t),
            stan::model::index_uni(1));
          current_statement__ = 20;
          stan::model::assign(xi, (1.0 -
            stan::model::rvalue(xi, "xi", stan::model::index_uni(t),
              stan::model::index_uni(1))), "assigning variable xi",
            stan::model::index_uni(t), stan::model::index_uni(2));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(eta);
        out__.write(xi);
        out__.write(f);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(p,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(2),
        "assigning variable p");
      out__.write_free_lub(0, 1, p);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, rho);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(2),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(2),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      local_scalar_t__ xi1_init = DUMMY_VAR__;
      current_statement__ = 5;
      xi1_init = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, xi1_init);
      local_scalar_t__ y_tm1_init = DUMMY_VAR__;
      current_statement__ = 6;
      y_tm1_init = in__.read<local_scalar_t__>();
      out__.write(y_tm1_init);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "p", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "xi1_init",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "y_tm1_init",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 1;
        p_flat__ = context__.vals_r("p");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(p, p_flat__[(pos__ - 1)],
            "assigning variable p", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, p);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = context__.vals_r("rho")[(1 - 1)];
      out__.write_free_lb(0, rho);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 3;
        alpha_flat__ = context__.vals_r("alpha");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 4;
        sigma_flat__ = context__.vals_r("sigma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma);
      local_scalar_t__ xi1_init = DUMMY_VAR__;
      current_statement__ = 5;
      xi1_init = context__.vals_r("xi1_init")[(1 - 1)];
      out__.write_free_lub(0, 1, xi1_init);
      local_scalar_t__ y_tm1_init = DUMMY_VAR__;
      current_statement__ = 6;
      y_tm1_init = context__.vals_r("y_tm1_init")[(1 - 1)];
      out__.write(y_tm1_init);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"p", "rho", "alpha", "sigma",
                "xi1_init", "y_tm1_init"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"eta", "xi", "f"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(2)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(T)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "xi1_init");
    param_names__.emplace_back(std::string() + "y_tm1_init");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "eta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "xi" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "f" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "xi1_init");
    param_names__.emplace_back(std::string() + "y_tm1_init");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "eta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "xi" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "f" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"xi1_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_tm1_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"xi1_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_tm1_init\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((2 + 1) + 2) + 2) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((T * 2) +
      (T * 2)) + T));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((2 + 1) + 2) + 2) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((T * 2) +
      (T * 2)) + T));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = JimSavageCauchy_model_namespace::JimSavageCauchy_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return JimSavageCauchy_model_namespace::profiles__;
}
#endif